
#module _Play_

	//DXライブラリグラフィック(gameplay)
	#enum ibg_0			=	0
	#enum ibg_top
	#enum ibg_bottom
	#enum ibg_songinfo
	#enum ibg_playerdata
	#enum ibg_scoregraph
	#enum ibg_score
	#enum ichip_key
	#enum ichip_key_active
	#enum inote_0
	#enum ihold_org_0
	#enum ihold_0
	#enum ijudge_excellent
	#enum ijudge_great
	#enum ijudge_good
	#enum ijudge_bad
	#enum ijudge_miss
	#enum ieff_lane
	#enum ieff_particle_0
	#enum ieff_particle_1
	#enum ieff_particle_2
	#enum ieff_particle_3
	#enum ieff_particle_4
	#enum ieff_particle_5
	#enum ieff_particle_6
	#enum ieff_particle_7
	#enum ieff_bonus_combo

	//DXライブラリフォントハンドル(gameplay)
	#enum fEOEXB16			=	0
	#enum fEOEXB20
	#enum fFAB50
	#enum fNSCJM12
	#enum fNSCJM15
	#enum fNSCJM16
	#enum fNSCJM20
	#enum fNSCJM32
	#enum fPS14
	#enum fPS16
	#enum fPS18
	#enum fPS20
	#enum fSQNUM16
	#enum fSQNUM24
	#enum fSQNUM40

	//オブジェクトの種類
	#enum OBJ_DUMMY		=	0
	#enum OBJ_SINGLENOTE
	#enum OBJ_holdSTART
	#enum OBJ_holdEND

	//判定幅
	#const jWid_Excellent	20
	#const jWid_Great		40
	#const jWid_Good		80
	#const jWid_Bad		160
	#const jWid_Miss		320

	//判定の種類
	#enum jres_Unknown		=	0
	#enum jres_Excellent
	#enum jres_Great
	#enum jres_Good
	#enum jres_Bad
	#enum jres_Miss

	//ゲージ
	#enum GAUGE_ASSIST		=	0
	#enum GAUGE_NORMAL
	#enum GAUGE_EXPERT
	#enum GAUGE_MADNESS

	//プレイ画面の画像リソースを読み込み
	#deffunc LoadGamePlayImages
		dim hdximg
		hdximg(ibg_0)=LoadGraph("Data/bg_0.png")
		hdximg(ibg_top)=LoadGraph("Data/bg_Top.png")
		hdximg(ibg_bottom)=LoadGraph("Data/bg_Bottom.png")
		hdximg(ibg_songinfo)=LoadGraph("Data/bg_SongInfo.png")
		hdximg(ibg_playerdata)=LoadGraph("Data/bg_playerdata.png")
		hdximg(ibg_scoregraph)=LoadGraph("Data/bg_scoregraph.png")
		hdximg(ibg_score)=LoadGraph("Data/bg_score.png")
		hdximg(ichip_key)=LoadGraph("Data/chip_Key.png")
		hdximg(ichip_key_active)=LoadGraph("Data/chip_key_active.png")
		hdximg(inote_0)=LoadGraph("Data/note_0.png")
		hdximg(ihold_org_0)=LoadGraph("Data/note_hold_0.png")
		hdximg(ijudge_excellent)=LoadGraph("Data/judge_excellent.png")
		hdximg(ijudge_great)=LoadGraph("Data/judge_great.png")
		hdximg(ijudge_good)=LoadGraph("Data/judge_good.png")
		hdximg(ijudge_bad)=LoadGraph("Data/judge_bad.png")
		hdximg(ijudge_miss)=LoadGraph("Data/judge_miss.png")
		hdximg(ieff_lane)=LoadGraph("Data/effect_lane.png")
		repeat 8
			hdximg(ieff_particle_0+cnt)=LoadGraph("Data/effect_Particle_"+cnt+".png")
		loop
		hdximg(ieff_bonus_combo)=LoadGraph("Data/bonus_Combo.png")

		dim hdximg_arr_bomb,10
		cfunc64v LoadDivGraph,"Data/effect_bomb.png",10,5,2,192,192,varptr64(hdximg_arr_bomb)
		dim hdximg_arr_burst,16
		cfunc64v LoadDivGraph,"Data/effect_Burst.png",16,2,8,384,384,varptr64(hdximg_arr_burst)

		//ロングノーツ用
			hdximg(ihold_0)=MakeScreen(90,1024,TRUE)
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			repeat 1024/90+1
				SetDrawScreen hdximg(ihold_0)
					DrawGraph 0,cnt*90,hdximg(ihold_org_0),TRUE
			loop
	return

	//プレイ画面で使用するフォントの初期化
	#deffunc InitGamePlayFonts
		InitFontToHandle
		dim hdxfont
		hdxfont(fEOEXB16)=LoadFontDataToHandle("Data/eoexb16.bin")
		hdxfont(fEOEXB20)=LoadFontDataToHandle("Data/eoexb20.bin")
		hdxfont(fFAB50)=LoadFontDataToHandle("Data/fab50.bin")
		hdxfont(fNSCJM12)=LoadFontDataToHandle("Data/nscjm12.bin")
		hdxfont(fNSCJM15)=LoadFontDataToHandle("Data/nscjm15.bin")
		hdxfont(fNSCJM16)=LoadFontDataToHandle("Data/nscjm16.bin")
		hdxfont(fNSCJM20)=LoadFontDataToHandle("Data/nscjm20.bin")
		hdxfont(fNSCJM32)=LoadFontDataToHandle("Data/nscjm32.bin")
		hdxfont(fPS14)=LoadFontDataToHandle("Data/ps14.bin")
		hdxfont(fPS16)=LoadFontDataToHandle("Data/ps16.bin")
		hdxfont(fPS18)=LoadFontDataToHandle("Data/ps18.bin")
		hdxfont(fPS20)=LoadFontDataToHandle("Data/ps20.bin")
		hdxfont(fSQNUM40)=LoadFontDataToHandle("Data/sqnum40.bin")
		hdxfont(fSQNUM24)=LoadFontDataToHandle("Data/sqnum24.bin")
		hdxfont(fSQNUM16)=LoadFontDataToHandle("Data/sqnum16.bin")
	return

	//譜面ファイルを開く
	#deffunc OpenChartFile str _filename
		sdim chartFileName
		chartFileName=_filename
		exist chartFileName
		if strsize==-1 {
			return -1
		}
		sdim chartFileBuf,strsize
		bload chartFileName,chartFileBuf

		sdim chartMetaInfo,META_MAX
		chartMetaInfo(META_TITLE)=GetINIvalue(chartFileBuf,"Metadata","Title")
		chartMetaInfo(META_ARTIST)=GetINIvalue(chartFileBuf,"Metadata","Artist")
		chartMetaInfo(META_SOURCE)=GetINIvalue(chartFileBuf,"Metadata","Source")
		chartMetaInfo(META_DIFFICULTY)=GetINIvalue(chartFileBuf,"Metadata","Difficulty")
		chartMetaInfo(META_LEVEL)=GetINIvalue(chartFileBuf,"Metadata","Level")
		chartMetaInfo(META_BGA)=GetINIvalue(chartFileBuf,"Metadata","Background.Video")
		chartMetaInfo(META_BGM)=GetINIvalue(chartFileBuf,"Metadata","Background.Audio")
		chartMetaInfo(META_BGAOFFSET)=GetINIvalue(chartFileBuf,"Metadata","Background.Video.Offset")
		chartMetaInfo(META_BGMOFFSET)=GetINIvalue(chartFileBuf,"Metadata","Background.Audio.Offset")
		chartMetaInfo(META_BGAIMAGE)=GetINIvalue(chartFileBuf,"Metadata","Background.Image")
		chartMetaInfo(META_EVOFFSET)=GetINIvalue(chartFileBuf,"Metadata","Event.Sound.Offset")

		//UUID取り出し
			sdim tmpstr:tmpstr=chartFileName:strrep tmpstr,"\\","/"
			split tmpstr,"/",tmpstr
			chartMetaInfo(META_UUID)=tmpstr(length(tmpstr)-2)

		//汎用ムービーのパス指定
			if chartMetaInfo(META_BGA)=="" :chartMetaInfo(META_BGA)="general-movie-*.ogv"
			if BGAquality@=="*" :chartMetaInfo(META_BGA)="*"

		notesel chartFileBuf
		sdim INIline
		sdim INIkey:sdim INIval

		//オブジェクト関連の変数を初期化
		dim objTiming
		dim objLaneID
		dim objType
		dim objSoundID
		dim objSoundVol
		dim objLength
		dim objAssignFlag
		dim objAutoFlag
		dim objJudgeFlag
		dim objDrawPos
		ddim objBPM,1
		dim ObjMax

		//サウンドライブラリ関連の変数を初期化
		sdim SoundDBFileName
		dim SoundDBMax

		//プレイ開始前の待機時間(ms)
		dim PreTime
		PreTime=3000

		//BPM関連の変数を初期化
		dim BPMTiming
		ddim BPMValue,1
		dim BPMpointMax

		//サウンドイベント関連の変数を初期化
		dim SndEventID
		dim SndEventTime
		ddim SndEventVol,1
		dim SndEventMax
		dim SndPlayFlag

		//譜面ファイルの構文を解析
		repeat notemax
			noteget INIline,cnt
			split INIline,"=",INIkey,INIval
			switch INIkey
				case"Sound.Set"		//キーサウンドを定義
					split INIval,",",Objinfoprm
					SoundDBFileName(int(Objinfoprm(0)))=Objinfoprm(1)
					SoundDBMax++
				swbreak
				case"BPM.Set"			//BPM変更地点
					sdim BPMinfoprm
					split INIval,",",BPMinfoprm
					if int(BPMinfoprm(0))==0 {
						BPMTiming(BPMpointMax)=int(BPMinfoprm(0))
					} else {
						BPMTiming(BPMpointMax)=int(BPMinfoprm(0))+PreTime
					}
					BPMValue(BPMpointMax)=double(BPMinfoprm(1))
					BPMpointMax++
				swbreak
				case"Note.Single"		//シングルノート
					split INIval,",",Objinfoprm
					ObjLaneID(ObjMax)=int(Objinfoprm(0))
					if flagSideNote==FALSE :ObjLaneID(ObjMax)++		//サイドノーツ分を移動
					ObjTiming(ObjMax)=int(Objinfoprm(1))+PreTime
					ObjSoundID(ObjMax)=int(Objinfoprm(2))
					ObjSoundVol(ObjMax)=int(Objinfoprm(3))
					ObjLength(ObjMax)=1
					ObjType(ObjMax)=OBJ_SINGLENOTE
					ObjJudgeFlag(ObjMax)=0
					ObjAssignFlag(ObjMax)=0
					ObjAutoFlag(ObjMax)=0
					ObjMax++
				swbreak
				case"Note.Hold.Start"	//ホールドノーツ（始点）
					split INIval,",",Objinfoprm
					ObjLaneID(ObjMax)=int(Objinfoprm(0))
					if flagSideNote==FALSE :ObjLaneID(ObjMax)++		//サイドノーツ分を移動
					ObjTiming(ObjMax)=int(Objinfoprm(1))+PreTime
					ObjSoundID(ObjMax)=int(Objinfoprm(3))
					ObjSoundVol(ObjMax)=int(Objinfoprm(4))
					ObjLength(ObjMax)=int(Objinfoprm(2))
					ObjType(ObjMax)=OBJ_holdSTART
					ObjJudgeFlag(ObjMax)=0
					ObjAssignFlag(ObjMax)=0
					ObjAutoFlag(ObjMax)=0
					ObjMax++
				swbreak
				case"Note.Hold.End"		//ホールドノーツ（終点）
					split INIval,",",Objinfoprm
					ObjLaneID(ObjMax)=int(Objinfoprm(0))
					if flagSideNote==FALSE :ObjLaneID(ObjMax)++		//サイドノーツ分を移動
					ObjTiming(ObjMax)=int(Objinfoprm(1))+PreTime
					ObjSoundID(ObjMax)=-1
					ObjSoundVol(ObjMax)=0
					ObjLength(ObjMax)=1
					ObjType(ObjMax)=OBJ_holdEND
					ObjJudgeFlag(ObjMax)=0
					ObjAssignFlag(ObjMax)=0
					ObjAutoFlag(ObjMax)=0
					ObjMax++
				swbreak
				case"Play"			//サウンドイベント
					split INIval,",",Objinfoprm
					SndEventTime(SndEventMax)=int(Objinfoprm(0))
					SndEventID(SndEventMax)=int(Objinfoprm(1))
					SndEventVol(SndEventMax)=double(Objinfoprm(2))/100.0
					SndPlayFlag(SndEventMax)=0
					SndEventMax++
				swbreak
			swend
		loop

		//BPM値をノーツに割り当て
			dim SearchNoteID
			repeat ObjMax
				ObjBPM(SearchNoteID)=0.0
				repeat BPMpointMax
					if BPMTiming(cnt)<ObjTiming(SearchNoteID) {
						ObjBPM(SearchNoteID)=BPMValue(cnt)
					}
				loop

				SearchNoteID++
			loop

		//ノーツ位置を計算
			dimtype ObjPosition,vartype("double")
			dimtype TmpNotepos,vartype("double")
			dimtype AlyNotepos,vartype("double")
			repeat ObjMax
				if cnt==0 {
					ObjPosition(cnt)=TmpNotepos-(double(ObjTiming(cnt))*ObjBPM(cnt)/400.0)
				} else {
					ObjPosition(cnt)=TmpNotepos-(double(ObjTiming(cnt)-ObjTiming(cnt-1))*ObjBPM(cnt)/400.0)
				}
				TmpNotepos=ObjPosition(cnt)
			loop

		//キーサウンドの読み込み
			dim64 hSndDB:dim64 hsmpSndDB:dim keysndIndexID
			sdim keysndBuf:dim hLoadCnt
			binpkg_Load getpath(chartFileName,32)+"musicdata.pkg"
			repeat SoundDBMax
				keysndIndexID(hLoadCnt)=binpkg_GetIndex(SoundDBFileName(hLoadCnt))
				if keysndIndexID(hLoadCnt)!-1 {
					;binpkg_extract SoundDBFileName(hLoadCnt),"Cache/"+SoundDBFileName(hLoadCnt)
					binpkg_CopytoBuffer keysndBuf,keysndIndexID(hLoadCnt)
					hsmpSndDB(hLoadCnt)=cfunc64(RET_INT64,BASS_SampleLoad,TRUE,varptr64(keysndBuf),0,binpkg_GetFileLength(keysndIndexID(hLoadCnt)),32,0)
					if hsmpSndDB(hLoadCnt)==0 :logmes""+SoundDBFileName(hLoadCnt)+"\nError Code : "+BASS_ErrorGetCode()
					hSndDB(hLoadCnt)=cfunc64(RET_INT64,BASS_SampleGetChannel,hsmpSndDB(hLoadCnt),TRUE)
					hLoadCnt++
				}
			loop
			binpkg_Free

		//BGM
			if GetChartInfo(META_BGM)!"" {
				dim64 hSndBGM:dim64 hsmpSndBGM
				hsmpSndBGM=cfunc64(RET_INT64,BASS_SampleLoad,FALSE,getpath(chartFileName,32)+GetChartInfo(META_BGM),0,0,32,0)
				if hsmpSndBGM==0 :logmes""+SoundDBFileName(hLoadCnt)+"\nError Code : "+BASS_ErrorGetCode()
				hSndBGM=cfunc64(RET_INT64,BASS_SampleGetChannel,hsmpSndBGM,TRUE)
			}

		//スコア計算
			dim ObjHitScore
			ObjHitScore=10000000/ObjMax
			dim BonusScore
			BonusScore=10000000\ObjMax

		//自己ベストデータを読み込み
			sdim MybestRecordBuf
			WebAPI_SyncRecord GetChartInfo(META_UUID),MybestRecordBuf
	return

	//譜面ファイルのメタデータを取得
	#defcfunc GetChartInfo int _id
	return chartMetaInfo(_id)

	//プレイ開始時の初期化処理
	#deffunc StartGameplay

		//変数初期化
			dim ProgLongNoteID,6
			repeat 6
				ProgLongNoteID(cnt)=-1
			loop
			dim LaneEffMode,6
			dim LaneBombFlag,6
			dim ParticleEffFlag,6
			dim ParticleEffCount,6
			dim ParticleEffImg,6
			dim bonusDispCount
			dim bonusDispImg
			dim numExcellent
			dim numGreat
			dim numGood
			dim numBad
			dim numMiss
			dim numCombobreak
			dim curCombo
			dim MaxCombo
			dim judgeSign
			dim curScore
			dim GaugeType
			ddim curGauge,1
			dim BGAplayflag
			dim BGAgenflag
			dim BGMplayflag
			dim burstCount
			dim AutoPlayFlag
			ddim TotalRagMs,1
			dim curCount
			ddim curCount_f,1
			AutoPlayFlag=0
			burstCount=-1
			DispOffset=0

	//BGAファイルの処理
		if GetChartInfo(META_BGA)!"" {
			exist getpath(chartFileName,32)+GetChartInfo(META_BGA)
			dim hdximg_gameplaybga
			if strsize==-1 {
				SetDXArchiveExtension"bin"
				if GetMovieAlias(GetChartInfo(META_BGA))!-1 {
					hdximg_gameplaybga=LoadGraph("Data/res_movie_p/"+BGAquality@+"_m"+GetMovieAlias(GetChartInfo(META_BGA))+".ogv")
					BGAgenflag=TRUE
				} else {
					hdximg_gameplaybga=LoadGraph("Data/res_movie_p/"+BGAquality@+"_m"+rnd(36)+".ogv")
					BGAgenflag=TRUE
				}
				PlayMovieToGraph hdximg_gameplaybga,DX_PLAYTYPE_LOOP
			} else {
				hdximg_gameplaybga=LoadGraph(getpath(chartFileName,32)+GetChartInfo(META_BGA))
				BGAgenflag=FALSE
			}
		}
		if GetChartInfo(META_BGAIMAGE)!"" {
			dim hdximg_gameplaybga
			hdximg_gameplaybga=LoadGraph(getpath(chartFileName,32)+GetChartInfo(META_BGAIMAGE))
		}
		stdCount=GetNowCount()
	return

	//プレイ画面の毎フレーム処理
	#deffunc DrawGamePlay int _count

		//遅延補正
			TotalRagMs+double(curCount)-curCount_f
			curCount=GetNowCount()-stdCount-TotalRagMs
			curCount_f+1000.0/double(FPSvalue@)

		//判定処理
			dim KeybtJudge,2,6
			KeybtJudge(0,0)=bfKeyFlag@(KEY_INPUT_S)
			KeybtJudge(1,0)=KeyFlag@(KEY_INPUT_S)
			KeybtJudge(0,1)=bfKeyFlag@(KEY_INPUT_D)
			KeybtJudge(1,1)=KeyFlag@(KEY_INPUT_D)
			KeybtJudge(0,2)=bfKeyFlag@(KEY_INPUT_F)
			KeybtJudge(1,2)=KeyFlag@(KEY_INPUT_F)
			KeybtJudge(0,3)=bfKeyFlag@(KEY_INPUT_J)
			KeybtJudge(1,3)=KeyFlag@(KEY_INPUT_J)
			KeybtJudge(0,4)=bfKeyFlag@(KEY_INPUT_K)
			KeybtJudge(1,4)=KeyFlag@(KEY_INPUT_K)
			KeybtJudge(0,5)=bfKeyFlag@(KEY_INPUT_L)
			KeybtJudge(1,5)=KeyFlag@(KEY_INPUT_L)

			//一番近いノーツIDとその時間差を算出
				repeat 6
					NearNoteID(cnt)=-1
					NearNoteGap(cnt)=-1
					ProgLaneID=cnt
					repeat ObjMax
						if ObjJudgeFlag(cnt)==1 :continue
						if ObjLaneID(cnt)!ProgLaneID :continue
						if NearNoteGap(ProgLaneID)==-1 {
							NearNoteGap(ProgLaneID)=abs(curCount+JudgeOffset-ObjTiming(cnt))
							NearNoteID(ProgLaneID)=cnt
						} else {
							if NearNoteGap(ProgLaneID)>abs(curCount+JudgeOffset-ObjTiming(cnt)) {
								NearNoteGap(ProgLaneID)=abs(curCount+JudgeOffset-ObjTiming(cnt))
								NearNoteID(ProgLaneID)=cnt
							}
						}
					loop
					//キーサウンドを割り当て
					KeyAssignID(ProgLaneID)=NearNoteID(ProgLaneID)

					//判定から除外
					if NearNoteGap(ProgLaneID)>jWid_Miss :NearNoteID(ProgLaneID)=-1
				loop

			repeat 6
				ProgLaneID=cnt
				if KeybtJudge(0,ProgLaneID)==0&KeybtJudge(1,ProgLaneID)==1 {
					VisualBData(0)++
					//レーンエフェクトの演出設定をリセット
					LaneEffMode(ProgLaneID)=1
					LaneEffCount(ProgLaneID)=0

					if KeyAssignID(ProgLaneID)!-1 {
						if ObjSoundID(KeyAssignID(ProgLaneID))!-1 {
							cfunc64v BASS_ChannelSetPosition,hSndDB(ObjSoundID(KeyAssignID(ProgLaneID))),0,0,0
							cfunc64v BASS_ChannelPlay,hSndDB(ObjSoundID(KeyAssignID(ProgLaneID)))
						}
					}
					if UseDefSndSet==TRUE {
						cfunc64v BASS_ChannelSetPosition,hsnd(se_sndset_Default),0,0,0
						cfunc64v BASS_ChannelPlay,hsnd(se_sndset_Default)
					}
					if NearNoteID(ProgLaneID)!-1&AutoPlayFlag==0 {
						if ObjType(NearNoteID(ProgLaneID))==OBJ_SINGLENOTE|OBJ_holdSTART {
							ObjJudgeProg
							if ObjType(NearNoteID(ProgLaneID))==OBJ_holdSTART {
								ProgLongNoteID(ProgLaneID)=NearNoteID(ProgLaneID)+1
							}
						}
					}
				}
				if KeybtJudge(0,ProgLaneID)==1&KeybtJudge(1,ProgLaneID)==0 {
					LaneEffMode(ProgLaneID)=3
					LaneEffCount(ProgLaneID)=0

					if ProgLongNoteID(ProgLaneID)!-1&AutoPlayFlag==0 {
						NearNoteID(ProgLaneID)=ProgLongNoteID(ProgLaneID)
						NearNoteGap(ProgLaneID)=abs(curCount+JudgeOffset-ObjTiming(NearNoteID(ProgLaneID)))
						ObjJudgeProg
							if ResJudge==jres_Unknown {
								ResJudge=jres_Miss
								UpdateJudgeValue ResJudge
								ObjJudgeFlag(NearNoteID(ProgLaneID))=1
								LaneBombFlag(ProgLaneID)=1
								LaneBombCount(ProgLaneID)=0
							}
							ProgLongNoteID(ProgLaneID)=-1		//判定中のノーツIDを削除
						}
				}
			loop

		//背景画像
			setease 0,256,ease_linear
			SetDrawBlendMode DX_BLENDMODE_ALPHA,getease(curCount-PreTime,1000)
			if BGAgenflag==TRUE :SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			if GetChartInfo(META_BGA)=="*"&GetChartInfo(META_BGAIMAGE)=="" {
				DrawGraph 0,0,hdximg(ibg_0),FALSE
			} else {
				if BGAgenflag==FALSE {
					if int(GetChartInfo(META_BGAOFFSET))<curCount-PreTime&BGAplayflag==FALSE :BGAplayflag=TRUE:PlayMovieToGraph hdximg_gameplaybga,DX_PLAYTYPE_LOOP
				}
				DrawExtendGraph 0,0,BufWidth@,BufHeight@,hdximg_gameplaybga,FALSE
			}
			if BGAblurlev@!0 {
				GraphFilterRectBltS hdximg@(iScene),hdximg@(iScene),0,0,BufWidth@,BufHeight@,0,0,DX_GRAPH_FILTER_GAUSS,32,800*BGAblurlev@
			}

		//BGM
			if int(GetChartInfo(META_BGMOFFSET))<curCount-PreTime&BGMplayflag==FALSE :BGMplayflag=TRUE:cfunc64v BASS_ChannelPlay,hSndBGM

		//レーン
			//x4
				GraphFilterRectBltS hdximg@(iScene),hdximg@(iScene),780,64,1140,864,780,64,DX_GRAPH_FILTER_GAUSS,32,6400*BGAblurlev@
				SetDrawBlendMode DX_BLENDMODE_ALPHA,100
				DrawBox 780,64,1140,864,GetColor(255,255,255),TRUE
				SetDrawBlendMode DX_BLENDMODE_ALPHA,50
				repeat 4
					DrawBox 780+90*cnt,64,780+90*(cnt+1),864,GetColor(0,0,0),FALSE
				loop
			//side(l)
				GraphFilterRectBltS hdximg@(iScene),hdximg@(iScene),662,64,772,864,662,64,DX_GRAPH_FILTER_GAUSS,32,6400*BGAblurlev@
				SetDrawBlendMode DX_BLENDMODE_ALPHA,100
				DrawBox 662,64,772,864,GetColor(255,255,255),TRUE
				SetDrawBlendMode DX_BLENDMODE_ALPHA,50
				DrawBox 662,64,772,864,GetColor(0,0,0),FALSE
			//side(r)
				GraphFilterRectBltS hdximg@(iScene),hdximg@(iScene),1148,64,1258,864,1148,64,DX_GRAPH_FILTER_GAUSS,32,6400*BGAblurlev@
				SetDrawBlendMode DX_BLENDMODE_ALPHA,100
				DrawBox 1148,64,1258,864,GetColor(255,255,255),TRUE
				SetDrawBlendMode DX_BLENDMODE_ALPHA,50
				DrawBox 1148,64,1258,864,GetColor(0,0,0),FALSE

		//レーンエフェクト
			repeat 6
				if LaneEffMode(cnt)==0 :continue
					//押し始め
					if LaneEffMode(cnt)==1 {
						setease 100,256,ease_cubic_out
						SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(LaneEffCount(cnt),10)
						if LaneEffCount(cnt)>10 :LaneEffMode(cnt)=2:LaneEffCount(cnt)=0
					}
					//継続
					if LaneEffMode(cnt)==2 {
						SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
					}
					//離した
					if LaneEffMode(cnt)==3 {
						setease 256,0,ease_cubic_out
						SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(LaneEffCount(cnt),12)
						if LaneEffCount(cnt)>12 :LaneEffMode(cnt)=0
					}
					if cnt==0|cnt==5 {
						if cnt==0 :DrawGraph 662,64,hdximg(ieff_lane),TRUE
						if cnt==5 :DrawGraph 1148,64,hdximg(ieff_lane),TRUE
					} else {
						if cnt\2!0&frameCount>40 {
							DrawGraph 780+(cnt-1)*90,64,hdximg(ieff_lane),TRUE
						} else {
							DrawGraph 780+(cnt-1)*90,64,hdximg(ieff_lane),TRUE
						}
					}

				LaneEffCount(cnt)++
			loop

		//スクロール速度
			ddim ScrollSpeed,1
			repeat BPMpointMax
				if BPMTiming(cnt)<curCount {
					ScrollSpeed=BPMValue(cnt)/400.0
					CurBPM=BPMValue(cnt)
				}
			loop

		//ノーツ
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			easeAddSpeedRes=3.4
			NoteHeight=32
			repeat ObjMax
				if ScrollSpeed!0.0&curCount>0 :ObjPosition(cnt)+(1000.0/double(FPSvalue@)*ScrollSpeed)
				ObjDrawPos(cnt)=864+(ObjPosition(cnt)*easeAddSpeedRes)-DispOffset
				DrawPosY=ObjDrawPos(cnt)
				if ObjType(cnt)==OBJ_holdSTART {
					tmpholdStartID=cnt
				}
				if ObjType(cnt)==OBJ_SINGLENOTE {
					if DrawPosY<0 :continue
					if DrawPosY>BufHeight@ :continue
				}
				if ObjJudgeFlag(cnt)==TRUE :continue

				//基本ノーツ画像
					if DrawPosY>0&DrawPosY+NoteHeight<864 {
						if ObjLaneID(cnt)\2!0 {
							CopyMatImageHwnd=hdximg(inote_0)
						} else {
							CopyMatImageHwnd=hdximg(inote_0)
						}
						if ObjLaneID(cnt)==0|ObjLaneID(cnt)==5 {
							if ObjLaneID(cnt)==0 :DrawGraph 662,DrawPosY,hdximg(inote_0),TRUE
							if ObjLaneID(cnt)==5 :DrawGraph 1148,DrawPosY,hdximg(inote_0),TRUE
						} else {
							DrawGraph 780+(ObjLaneID(cnt)-1)*90,DrawPosY,CopyMatImageHwnd,TRUE
						}
					}

				//ロングノーツ
					if ObjType(cnt)==OBJ_holdEND {
						tmpholdNoteHeight=ObjDrawPos(tmpholdStartID)-(DrawPosY+NoteHeight)
						if DrawPosY+tmpholdNoteHeight+NoteHeight>864 :tmpholdNoteHeight=864-DrawPosY-NoteHeight
						if ObjLaneID(cnt)==0|ObjLaneID(cnt)==5 {
							if ObjLaneID(cnt)==0 :CopyMatImageHwnd=hdximg(ihold_0)
							if ObjLaneID(cnt)==5 :CopyMatImageHwnd=hdximg(ihold_0)
						} else {
							if ObjLaneID(cnt)\2==0 {
								CopyMatImageHwnd=hdximg(ihold_0)
							} else {
								CopyMatImageHwnd=hdximg(ihold_0)
							}
						}
						//描画位置(x)
						if ObjLaneID(cnt)==0|ObjLaneID(cnt)==5 {
							if ObjLaneID(cnt)==0 :DrawPosX=662
							if ObjLaneID(cnt)==5 :DrawPosX=1148
						} else {
							DrawPosX=780+(ObjLaneID(cnt)-1)*90
						}
						if tmpholdNoteHeight<1024 {
							//素材より短いロングノーツ
							DrawRectGraph DrawPosX,DrawPosY+NoteHeight,0,0,90,tmpholdNoteHeight,CopyMatImageHwnd,TRUE
						} else {
							//素材より長いロングノーツ
							progObjID=cnt
							repeat tmpholdNoteHeight/1024
								DrawRectGraph DrawPosX,DrawPosY+1024*cnt+NoteHeight,0,0,90,1024,CopyMatImageHwnd,TRUE
							loop
							DrawRectGraph DrawPosX,DrawPosY+tmpholdNoteHeight/1024*1024+NoteHeight,0,0,90,tmpholdNoteHeight\1024,CopyMatImageHwnd,TRUE
						}
					}
				loop

		//判定文字
			setease 150,256,ease_cubic_out
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(JudgeAfCnt,5)
			if JudgeAfCnt>20 {
				setease 256,0,ease_linear
				SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(JudgeAfCnt-20,10)
			}
			setease 1.5,1,ease_cubic_out
			JudgeresWidth=int(200.0*geteasef(JudgeAfCnt,6))
			JudgeresHeight=int(50.0*geteasef(JudgeAfCnt,6))
			JudgeresPosX=860+200/2-JudgeresWidth/2,860+200/2-JudgeresWidth/2+JudgeresWidth
			JudgeresPosY=670+50/2-JudgeresHeight/2,670+50/2-JudgeresHeight/2+JudgeresHeight
			switch ResJudge
				case jres_Excellent	//Excellent
					DrawExtendGraph JudgeresPosX(0),JudgeresPosY(0),JudgeresPosX(1),JudgeresPosY(1),hdximg(ijudge_excellent),TRUE
				swbreak
				case jres_Great	//Great
					DrawExtendGraph JudgeresPosX(0),JudgeresPosY(0),JudgeresPosX(1),JudgeresPosY(1),hdximg(ijudge_great),TRUE
				swbreak
				case jres_Good		//Good
					DrawExtendGraph JudgeresPosX(0),JudgeresPosY(0),JudgeresPosX(1),JudgeresPosY(1),hdximg(ijudge_good),TRUE
				swbreak
				case jres_Bad		//Bad
					DrawExtendGraph JudgeresPosX(0),JudgeresPosY(0),JudgeresPosX(1),JudgeresPosY(1),hdximg(ijudge_bad),TRUE
				swbreak
				case jres_Miss		//Miss
					DrawExtendGraph JudgeresPosX(0),JudgeresPosY(0),JudgeresPosX(1),JudgeresPosY(1),hdximg(ijudge_miss),TRUE
				swbreak
			swend

		//バースト
			if burstCount!-1 {
				SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
				DrawGraph 960-384/2,625-384/2,hdximg_arr_burst(burstCount),TRUE
				if judgeAfCnt\2==0 :burstCount++
				if burstCount>15 :burstCount=-1
			}

		//コンボ
			SetDrawBlendMode DX_BLENDMODE_ALPHA,200
			DrawStringXCenterToHandle 780,600,strf("%04d",curCombo),360,GetColor(40,40,40),hdxfont(fFAB50)

		//判定バー
			SetDrawBlendMode DX_BLENDMODE_ALPHA,70
			DrawBox 0,868,BufWidth@,868+3,$58EEE3,TRUE
			SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			DrawBox 640,864,640+640,864+10,$58EEE3,TRUE

		//上部パネル
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 0,0,hdximg(ibg_top),TRUE

		//下部パネル
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 0,874,hdximg(ibg_bottom),TRUE
			SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			//平均オフセット
				DrawStringToHandle 396,909,"+0",GetColor(255,255,255),hdxfont(fSQNUM24)
			//スコアランク
				DrawStringToHandle 436,974,"AAA+",GetColor(255,255,255),hdxfont(fSQNUM24)
			//最大コンボ
				DrawStringToHandle 1596,909,"0000",GetColor(255,255,255),hdxfont(fSQNUM24)
			//ノーツの速度
				;DrawStringToHandle 1556,974,"1.00",GetColor(255,255,255),hdxfont(fSQNUM24)
				ddim curFPS,1
				curFPS=double(cfunc64(RET_FLOAT,GetFPS))
				DrawStringToHandle 1556,974,str(curFPS),GetColor(255,255,255),hdxfont(fSQNUM24)

		//左パネル
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 0,380,hdximg(ibg_playerdata),TRUE

		//キー
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			if KeybtJudge(1,0)==TRUE {
				DrawGraph 682,886,hdximg(ichip_key_active),TRUE
			} else {
				DrawGraph 682,886,hdximg(ichip_Key),TRUE
			}
			repeat 4
				if KeybtJudge(1,1+cnt)==TRUE {
					DrawGraph 791+90*cnt,894,hdximg(ichip_key_active),TRUE
				} else {
					DrawGraph 791+90*cnt,894,hdximg(ichip_Key),TRUE
				}
			loop
			if KeybtJudge(1,5)==TRUE {
				DrawGraph 1168,886,hdximg(ichip_key_active),TRUE
			} else {
				DrawGraph 1168,886,hdximg(ichip_Key),TRUE
			}

		//曲情報
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 0,100,hdximg(ibg_songinfo),TRUE
			//値
			SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			DrawStringToHandle 40,128,GetChartInfo(META_TITLE),GetColor(10,10,10),hdxfont(fNSCJM32)
			DrawStringToHandle 40,183,GetChartInfo(META_ARTIST),GetColor(30,30,30),hdxfont(fNSCJM20)
			DrawStringToHandle 40,222,GetChartInfo(META_SOURCE),GetColor(50,50,50),hdxfont(fNSCJM16)
			DrawStringToHandle 40,311,GetChartInfo(META_DIFFICULTY)+" Lv."+GetChartInfo(META_LEVEL),GetColor(240,240,240),hdxfont(fEOEXB20)

		//ステータス
			SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			DrawBox 0,BufHeight@-40,BufWidth@,BufHeight@,GetColor(50,50,50),TRUE
			DrawStringToHandle 24,1048,"XODA SAPPHIRE",GetColor(230,230,230),hdxfont(fPS20)
			DrawStringToHandle 220,1052,"Now playing "+GetChartInfo(META_ARTIST)+" - "+GetChartInfo(META_TITLE)+" ["+GetChartInfo(META_DIFFICULTY)+" Lv."+GetChartInfo(META_LEVEL)+"]",GetColor(210,210,210),hdxfont(fPS14)

		//ノーツボム
			repeat 6
				if LaneBombFlag(cnt)==1 {
					SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
					if cnt==0|cnt==5 {
						if cnt==0 :DrawGraph 662+110/2-192/2,864-192/2,hdximg_arr_bomb(LaneBombCount(cnt)),TRUE
						if cnt==5 :DrawGraph 1148+110/2-192/2,864-192/2,hdximg_arr_bomb(LaneBombCount(cnt)),TRUE
					} else {
						DrawGraph 780+90*(cnt-1)+90/2-192/2,846-192/2,hdximg_arr_bomb(LaneBombCount(cnt)),TRUE
					}
					if LaneBombCount(cnt)>=9 :LaneBombFlag(cnt)=0:LaneBombCount(cnt)=0:else{
						if judgeAfCnt\2==0:LaneBombCount(cnt)++
					}
				}
				if ParticleEffFlag(cnt)==1 {
					dim EaseWidth:dim EaseHeight:dim EasePosX:dim EasePosY
					setease 0.4,1,ease_cubic_out
					EaseWidth=int(geteasef(ParticleEffCount(cnt),25)*640)
					EaseHeight=int(geteasef(ParticleEffCount(cnt),25)*640)
					setease 256,0,ease_cubic_out
					SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(ParticleEffCount(cnt),25)
					EasePosX=780+90*(cnt-1)+90/2-EaseWidth/2
					if cnt==0 :EasePosX=662+110/2-EaseWidth/2
					if cnt==5 :EasePosX=1148+110/2-EaseWidth/2
					EasePosY=864-EaseHeight/2
					DrawExtendGraph EasePosX,EasePosY,EasePosX+EaseWidth,EasePosY+EaseHeight,hdximg(ieff_particle_0+ParticleEffImg(cnt)),TRUE
					if ParticleEffCount(cnt)>25 :ParticleEffFlag(cnt)=0:else:ParticleEffCount(cnt)++
				}
			loop

		//ボーナス表示
			if bonusDispCount!-1 {
				if bonusDispCount>15+FPSvalue@*2 {
					setease 150,0,ease_cubic_out
					SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(bonusDispCount-15-FPSvalue@*2,15)
				} else {
					setease 0,150,ease_cubic_out
					SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(bonusDispCount,15)
				}
				setease 32,0,ease_cubic_out
				DrawGraph 780,450+getease(bonusDispCount,15),bonusDispImg,TRUE
				bonusDispCount++
				if bonusDispCount>15+FPSvalue@*2+15 :bonusDispCount=-1
			}

		//スコアグラフ
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 1500,240,hdximg(ibg_scoregraph),TRUE

		//スコア
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
			DrawGraph 1416,100,hdximg(ibg_score),TRUE
			SetDrawBlendMode DX_BLENDMODE_ALPHA,256
			setease easeScoreA,easeScoreB,ease_linear
			DrawStringToHandle 1580,124,strf("%08d",getease(easeScoreCount,FPSvalue@/2)),GetColor(0,0,0),hdxfont(fSQNUM40)
			easeScoreCount++
			DrawStringToHandle 1618,182,"00.00",GetColor(30,30,30),hdxfont(fSQNUM16)

		//プロフィール
			//アイコン
				SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,256
				DrawGraph 20,390,hCharImg@charicon(RegCharID@portalsync),TRUE
			//名前
				SetDrawBlendMode DX_BLENDMODE_ALPHA,256
				DrawStringToHandle 182,400,RegName@portalsync,GetColor(10,10,10),hdxfont(fNSCJM20)
			//レベル
				DrawStringToHandle 182,435,str(RegLev@portalsync),GetColor(10,10,10),hdxfont(fNSCJM16)
			//称号
				DrawStringToHandle 182,461,RegBadge@portalsync,GetColor(10,10,10),hdxfont(fNSCJM16)
			//パートナーの名前
				DrawStringToHandle 182,500,CharName@charicon(RegCharID@portalsync),GetColor(10,10,10),hdxfont(fNSCJM16)
			//パートナーレベル
				DrawStringToHandle 182,526,str(CharLev@charicon(RegCharID@portalsync)),GetColor(10,10,10),hdxfont(fNSCJM16)
			//総合能力値
				DrawStringToHandle 182,564,strf("%.3f",RegPfPoint@portalsync),GetColor(10,10,10),hdxfont(fNSCJM16)

		//自動判定
			repeat ObjMax
				if ObjAutoFlag(cnt)==1 :continue
				if ObjTiming(cnt)<curCount {
					ObjAutoFlag(cnt)=1
					ObjAutoJudgeID=cnt
					if AutoPlayFlag==1 {
						ResJudge=jres_Excellent
						UpdateJudgeValue ResJudge
						ObjJudgeFlag(cnt)=1
						if ObjSoundID(cnt)!-1 {
							cfunc64v BASS_ChannelSetPosition,hSndDB(ObjSoundID(cnt)),0,0,0
							cfunc64v BASS_ChannelPlay,hSndDB(ObjSoundID(cnt))
						}
						LaneBombFlag(ObjLaneID(cnt))=1
						LaneBombCount(ObjLaneID(cnt))=0
						LaneEffMode(ObjLaneID(cnt))=3
						LaneEffCount(ObjLaneID(cnt))=0
						ParticleEffFlag(ObjLaneID(cnt))=1
						ParticleEffCount(ObjLaneID(cnt))=0
						ParticleEffImg(objLaneID(cnt))=rnd(8)
						JudgeAfCnt=0
					}
				}
			loop

		//見逃し判定
			repeat ObjMax
				if ObjJudgeFlag(cnt)==1 :continue
				if curCount-ObjTiming(cnt)>jWid_Miss {
					ResJudge=jres_Miss
					UpdateJudgeValue ResJudge
					ObjJudgeFlag(cnt)=1
					JudgeSign=0
					//終点判定
					if ObjType(cnt)==OBJ_holdSTART {
						ObjJudgeFlag(cnt+1)=1
						UpdateJudgeValue ResJudge
					}
					curCombo=0
					JudgeAfCnt=0
				}
			loop

		//サウンドイベントの処理
			dim LastPlaySndID
			LastPlaySndID=-1
			repeat SndEventMax
				if SndPlayFlag(cnt)==0&curCount>SndEventTime(cnt)+PreTime+int(GetChartInfo(META_EVOFFSET))&SndEventID(cnt)!-1 {
					cfunc64v BASS_ChannelSetAttribute,hSndDB(SndEventID(cnt)),BASS_ATTRIB_VOL,d2f(SndEventVol(cnt))
					cfunc64v BASS_ChannelSetPosition,hSndDB(SndEventID(cnt)),0,0,0
					cfunc64v BASS_ChannelPlay,hSndDB(SndEventID(cnt))
					LastPlaySndID=SndEventID(cnt)
					PlaySndCount++
					SndPlayFlag(cnt)=1
				}
			loop

		//カウンタ
			JudgeAfCnt++
	return

	//オブジェクトの判定処理
	#deffunc ObjJudgeProg
		ResJudge=jres_Unknown
		if NearNoteGap(ProgLaneID)<=jWid_Miss		:ResJudge=jres_Miss		//MISS
		if NearNoteGap(ProgLaneID)<=jWid_Bad		:ResJudge=jres_Bad		//GOOD
		if NearNoteGap(ProgLaneID)<=jWid_Good		:ResJudge=jres_Good		//GREAT
		if NearNoteGap(ProgLaneID)<=jWid_Great		:ResJudge=jres_Great	//PERFECT
		if NearNoteGap(ProgLaneID)<=jWid_Excellent	:ResJudge=jres_Excellent	//PERFECT
	
		judgeSign=0
		judgeAfCnt=0
		if ResJudge!jres_Unknown {
			ObjJudgeFlag(NearNoteID(ProgLaneID))=1
			LaneBombFlag(ProgLaneID)=1
			LaneBombCount(ProgLaneID)=0
			ParticleEffFlag(ProgLaneID)=1
			ParticleEffCount(ProgLaneID)=0
			ParticleEffImg(ProgLaneID)=rnd(8)
			if ResJudge!jres_Excellent {
				if ObjTiming(NearNoteID(ProgLaneID))-(curCount+JudgeOffset)>0 {
					judgeSign=-1
					numEarly++
				} else {
					judgeSign=1
					numLate++
				}
			}
		}
	
		//コンボ&スコア処理
		UpdateJudgeValue ResJudge
	
	return

	//判定からスコア情報を更新する
	#deffunc UpdateJudgeValue int _judgeres

		easeScoreA=curScore
		switch _judgeres
			case jres_Excellent		//EXCELLENT判定
				numExcellent++
				curCombo++
				if curCombo>MaxCombo :MaxCombo=curCombo
				curScore+ObjHitScore
				//ボーナススコアを加算
				if BonusAddFlag==0 {
					curScore+BonusScore
					BonusAddFlag=1
				}
				curGauge+ObjHitGauge
			swbreak
			case jres_Great		//GREAT判定
				numGreat++
				curCombo++
				if curCombo>MaxCombo :MaxCombo=curCombo
				curScore+ObjHitScore/2
				curGauge+ObjHitGauge/2.0
			swbreak
			case jres_Good			//GOOD判定
				numGood++
				curCombo++
				if curCombo>MaxCombo :MaxCombo=curCombo
				curScore+ObjHitScore/4
			swbreak
			case jres_Bad			//BAD判定
				numBad++
				numCombobreak++
				curCombo=0

				switch GaugeType
					case GAUGE_ASSIST:curGauge-1.0:swbreak
					case GAUGE_NORMAL:curGauge-2.0:swbreak
					case GAUGE_EXPERT:curGauge-4.0:swbreak
					case GAUGE_MADNESS:curGauge-8.0:swbreak
				swend
			swbreak
			case jres_Miss			//MISS判定
				numMiss++
				numCombobreak++
				curCombo=0

				switch GaugeType
					case GAUGE_ASSIST:curGauge-2.0:swbreak
					case GAUGE_NORMAL:curGauge-4.0:swbreak
					case GAUGE_EXPERT:curGauge-8.0:swbreak
					case GAUGE_MADNESS:curGauge-16.0:swbreak
				swend
			swbreak
		swend
		easeScoreB=curScore
		easeScoreCount=0
		if curGauge>=100.0 :curGauge=100.0
		if curGauge<0.0 :curGauge=0.0

		//バースト発動条件
			if curCombo!0 {
				;if curCombo==50 :burstCount=0:bonusDispImg=hdximg(ieff_bonus_combo):bonusDispCount=0
				if curCombo\100==0 :burstCount=0:bonusDispImg=hdximg(ieff_bonus_combo):bonusDispCount=0
			}
	return

#global