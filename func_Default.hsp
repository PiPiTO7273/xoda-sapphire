
#module _funcdef_
	#defcfunc ConvUTF8toANSI str _p
		sdim tmpstr,512
		cnvstoa tmpstr,_p
		return tmpstr

	#defcfunc GetINIvalue str _inibuf,str _section,str _key
		sdim INIBuf:sdim NoteLine:sdim curSection:sdim resValue
		INIBuf=_inibuf

		notesel INIBuf
		repeat notemax
			noteget NoteLine,cnt
			if strmid(NoteLine,0,1)=="["&strmid(NoteLine,-1,1)=="]" {
				curSection=NoteLine
			}
			if getpath(curSection,16)=="["+getpath(_section,16)+"]"|curSection=="" {
				sdim INIprm:split NoteLine,"=",INIprm
				if getpath(INIprm(0),16)==getpath(_key,16) {
					resValue=INIprm(1)
					break
				}
			}
		loop

		noteunsel
		return resValue

	#defcfunc GetINISection str _inibuf,str _section
		sdim INIBuf:sdim NoteLine:sdim curSection:sdim resValue
		INIBuf=_inibuf

		notesel INIBuf
		repeat notemax
			noteget NoteLine,cnt
			if strmid(NoteLine,0,1)=="["&strmid(NoteLine,-1,1)=="]" {
				curSection=NoteLine
			}
			if getpath(curSection,16)=="["+getpath(_section,16)+"]" {
				resValue+NoteLine+"\n"
			}
		loop

		noteunsel
		return resValue

	#defcfunc ConvStrToBool str _in
		if _in=="TRUE" :return 1
		return 0
	#deffunc AddCount var _counter
		if CounterLev@==0 {		//自動判定
			if curFPS@<120 {
				_counter++
			} else {
				repeat 10
					if curFPS@>60*(cnt+2)&curFPS@<60*(cnt+3) :if coreCount@\(cnt+2)==0 :_counter++
				loop
			}
		} else {
			if coreCount@\CounterLev@==0 :_counter++
		}
		return

	#defcfunc GetScoreRank double _rate
		if _rate>=100.0 :return"MAX"
		if _rate>95.0 :return"EX+"
		if _rate>90.0 :return"EX"
		if _rate>86.6 :return"SSS"
		if _rate>83.3 :return"SS"
		if _rate>80.0 :return"S"
		if _rate>75.0 :return"AAA+"
		if _rate>70.0 :return"AAA"
		if _rate>65.0 :return"AA+"
		if _rate>60.0 :return"AA"
		if _rate>55.0 :return"A+"
		if _rate>50.0 :return"A"
		if _rate>45.0 :return"B+"
		if _rate>40.0 :return"B"
		if _rate>35.0 :return"C+"
		if _rate>30.0 :return"C"
		if _rate>25.0 :return"D+"
		if _rate>20.0 :return"D"
		if _rate>15.0 :return"E+"
		if _rate>10.0 :return"E"
		if _rate>5.0 :return"F+"
		if _rate>0.0 :return"F"
		if _rate<=0.0 :return"---"
		return"-"

	#deffunc LoadBASSsample str _filename,var _chvar,var _smpvar,int _flag
		exist _filename
		sdim hbassbin,strsize
		bload _filename,hbassbin
		_smpvar=cfunc64(RET_INT64,BASS_SampleLoad,TRUE,varptr64(hbassbin),0,varsize(hbassbin),32,0)
		_chvar=cfunc64(RET_INT64,BASS_SampleGetChannel,_smpvar,_flag)
		sdim hbassbin
		return

	#defcfunc insquare int _x,int _y,int _sqx1,int _sqy1,int _sqx2,int _sqy2
		return (_x>=_sqx1)&(_x<=_sqx2)&(_y>=_sqy1)&(_y<=_sqy2)

	#deffunc PlaySE int _hwnd,double _vol
		cfunc64v BASS_ChannelSetAttribute,_hwnd,BASS_ATTRIB_VOL,d2f(_vol)
		cfunc64v BASS_ChannelSetPosition,_hwnd,0,0,0
		cfunc64v BASS_ChannelPlay,_hwnd
		return

	#deffunc InitIntArray
		sdim i_keylist:dim i_vallist
	return
	#deffunc InitStrArray
		sdim s_keylist,128,1024:sdim s_vallist,1024,1024:dim s_valcnt
	return
	#deffunc RegIntArray str _key,int _value
		if vartype(i_keylist)==4 :InitIntArray
		dim mode:mode=0
		repeat length(i_keylist)
			if _key==i_keylist(cnt) {
				i_vallist(cnt)=_value
				mode=1
			}
		loop
		if mode==0 {
			i_keylist(length(i_keylist))=_key
			i_vallist(length(i_vallist))=_value
		}
	return
	#defcfunc GetIntArray str _key
		dim res
		repeat length(i_keylist)
			if _key==i_keylist(cnt) :res=i_vallist(cnt)
		loop
	return res
	#deffunc RegStrArray str _key,var _value
		if vartype(s_keylist)==4 :InitStrArray
		dim mode:mode=0
		repeat length(s_keylist)
			if _key==s_keylist(cnt) {
				memcpy s_vallist(cnt),_value,varsize(_value)
				mode=1
			}
		loop
		if mode==0 {
			s_keylist(s_valcnt)=_key
			memcpy s_vallist(s_valcnt),_value,varsize(_value)
			s_valcnt++
		}
	return
	#defcfunc GetStrArray str _key
		dim res
		repeat length(s_keylist)
			if _key==s_keylist(cnt) :res=s_vallist(cnt)
		loop
	return res

	#defcfunc GetPfPoint int _lev,int _score,int _maxcombo,str _dif,double _bonus
		ddim tmpdouble,1
		tmpdouble=10.0*(double(_lev)/10.0)*(double(_score)/10000000.0*1.5)*(1.0+double(_maxcombo)/1000.0)
		switch _dif
			case"Normal":tmpdouble+1.0*(double(_score)/10000000.0):swbreak
			case"Hard":tmpdouble+1.25*(double(_score)/10000000.0):swbreak
			case"Chaos":tmpdouble+1.5*(double(_score)/10000000.0):swbreak
		swend
		tmpdouble+_bonus
	return tmpdouble

	#defcfunc GetDaysoftheWeek int _type
		switch _type
			case 0
				switch gettime(2)
				case 0:return"日":swbreak
				case 1:return"月":swbreak
				case 2:return"火":swbreak
				case 3:return"水":swbreak
				case 4:return"木":swbreak
				case 5:return"金":swbreak
				case 6:return"土":swbreak
				swend
			swbreak
			case 1
				switch gettime(2)
				case 0:return"Sun":swbreak
				case 1:return"Mon":swbreak
				case 2:return"Tue":swbreak
				case 3:return"Wed":swbreak
				case 4:return"Thr":swbreak
				case 5:return"Fri":swbreak
				case 6:return"Sat":swbreak
				swend
			swbreak
			case 2
				switch gettime(2)
				case 0:return"Sunday":swbreak
				case 1:return"Monday":swbreak
				case 2:return"Tuesday":swbreak
				case 3:return"Wednesday":swbreak
				case 4:return"Thursday":swbreak
				case 5:return"Friday":swbreak
				case 6:return"Saturday":swbreak
				swend
			swbreak
		swend
		return

	#defcfunc GetGreetingWord
		sdim tmpstr
		tmpstr="はよ寝ろ"
		if gettime(4)>=6&gettime(4)<=10 :tmpstr="おはようございます"
		if gettime(4)>=11&gettime(4)<=18 :tmpstr="こんにちは"
		if gettime(4)>=19&gettime(4)<=23 :tmpstr="こんばんは"
		if gettime(1)==1&gettime(3)==1 :tmpstr="あけましておめでとうございます"
		return tmpstr

	#defcfunc GetCSVcolumn str _org,int _id,str _spt
		sdim tmpstr
		tmpstr=_org
		split tmpstr,_spt,tmpstr
		if length(tmpstr)<=_id :return""
		return tmpstr(_id)

	#deffunc StartDummy
		dim SceneCount
		dim DecideCount
		DecideCount=-1
		return

	#deffunc DrawDummy

		//カーソル位置補正
		dim MouseInput
		MouseInput=GetMouseInput()

		//背景
		SetDrawBlendMode DX_BLENDMODE_NOBLEND,256
		DrawExtendGraph 0,0,BufWidth@,BufHeight@,hdximg@(ibg_common_0),FALSE

		if SceneCount>10&DecideCount==-1 {
			setease 50,256,ease_cubic_out
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(SceneCount-10,25)
			setease 1.2,1,ease_cubic_out
			EaseWidth=int(1805.0*geteasef(SceneCount-10,25))
			EaseHeight=int(800.0*geteasef(SceneCount-10,25))
			EasePosX=0+1805/2-EaseWidth/2
			EasePosY=140+800/2-EaseHeight/2
			DrawExtendGraph EasePosX,EasePosY,EasePosX+EaseWidth,EasePosY+EaseHeight,hdximg@(ibg_dummyscene),TRUE
		}
		if DecideCount!-1 {
			setease 256,0,ease_cubic_out
			SetDrawBlendMode DX_BLENDMODE_PMA_ALPHA,getease(DecideCount,25)
			setease 1,1.2,ease_cubic_out
			EaseWidth=int(1805.0*geteasef(DecideCount,25))
			EaseHeight=int(800.0*geteasef(DecideCount,25))
			EasePosX=0+1805/2-EaseWidth/2
			EasePosY=140+800/2-EaseHeight/2
			DrawExtendGraph EasePosX,EasePosY,EasePosX+EaseWidth,EasePosY+EaseHeight,hdximg@(ibg_dummyscene),TRUE
		}
		if (MouseInput&MOUSE_INPUT_LEFT)&DecideCount==-1 {
			PlaySE int(hcommonsech@(sndDecide@)),1.0
			DecideCount=0
		}
		if DecideCount!-1 :AddCount DecideCount
		if DecideCount>25 {
			InitScene ID_LOBBY
			LoadLobbyImages
			InitLobbyFonts
			StartLobby
		}

		AddCount SceneCount

	#deffunc FillfromFirstNullToAll var _buf
		dim startpos:startpos=-1
		repeat varsize(_buf)
		if peek(_buf,cnt)==0 :startpos=cnt:break
		loop
		if startpos==-1 :dialog"?":return
		repeat varsize(_buf)-startpos
		poke _buf,startpos+cnt,0
		loop
		size=varsize(_buf)
		sdim tmpbk,size
		memcpy tmpbk,_buf,varsize(_buf)
		sdim _buf,startpos
		memcpy _buf,tmpbk,startpos
		return
		
		return
#global
InitIntArray
InitStrArray

#module "inimodule"
#uselib "kernel32"
#cfunc WritePrivateProfileString "WritePrivateProfileStringA" sptr,sptr,sptr,sptr
#cfunc GetPrivateProfileString "GetPrivateProfileStringA" sptr,sptr,sptr,sptr,sptr,sptr
#cfunc GetFullPathName "GetFullPathNameA" sptr,sptr,sptr,sptr
#define MAX_PATH 512
#define NULL 0
#define nSize 256
;--------INIInit(INIモジュール初期化)---------
;p1 INIファイルのパス
#deffunc INIInit str inii_s
	sdim INI_FileName,strlen(inii_s):INI_FileName=inii_s
	sdim INI_LongName,MAX_PATH
	exist inii_s:ini_filesize = strsize
	inii_size = cfunc64i(GetFullPathName,varptr64(INI_FileName),MAX_PATH,varptr64(INI_LongName),NULL)
	return inii_size
;--------INISet(INIを書き換える)---------
;p1 セクション名
;p2 キー名（""でセクションを削除）
;p3 書き換える文字列（""でキーを削除）
#deffunc INISet str inis_section,str inis_key,str inis_str
	sdim INI_Section,strlen(inis_section):INI_Section=inis_section
	if (inis_key!=""){sdim INI_Key,strlen(inis_key):INI_Key=inis_key:INI_KeyPtr=varptr64(INI_Key)}else{INI_KeyPtr=NULL}
	if (inis_str!=""){sdim INI_String,strlen(inis_str):INI_String=inis_str:INI_StringPtr=varptr64(INI_String)}else{INI_StringPtr=NULL}
	cfunc64v WritePrivateProfileString,varptr64(INI_Section),INI_KeyPtr,INI_StringPtr,varptr64(INI_LongName)
	return
#global