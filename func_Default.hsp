
#module _funcdef_
	#defcfunc ConvUTF8toANSI str _p
		sdim tmpstr,512
		cnvstoa tmpstr,_p
		return tmpstr

	#defcfunc GetINIvalue str _inibuf,str _section,str _key
		sdim INIBuf:sdim NoteLine:sdim curSection:sdim resValue
		INIBuf=_inibuf

		notesel INIBuf
		repeat notemax
			noteget NoteLine,cnt
			if strmid(NoteLine,0,1)=="["&strmid(NoteLine,-1,1)=="]" {
				curSection=NoteLine
			}
			if (getpath(curSection,16)==("["+getpath(_section,16)+"]"))|curSection=="" {
				sdim INIprm:split NoteLine,"=",INIprm
				if getpath(INIprm(0),16)==getpath(_key,16) {
					resValue=INIprm(1)
					break
				}
			}
		loop

		noteunsel

		;repeat varsize(resValue)
		;	if peek(resValue,cnt)==10 :poke resValue,cnt,0
		;	if peek(resValue,cnt)==13 :poke resValue,cnt,0
		;loop
		return resValue

	#defcfunc ConvStrToBool str _in
		if _in=="TRUE" :return 1
		return 0
	#deffunc AddCount var _counter
		if CounterLev@==0 {		//自動判定
			if curFPS@<120 {
				_counter++
			} else {
				repeat 10
					if curFPS@>60*(cnt+2)&curFPS@<60*(cnt+3) :if coreCount@\(cnt+2)==0 :_counter++
				loop
			}
		} else {
			if coreCount@\CounterLev@==0 :_counter++
		}
		return

	#defcfunc GetScoreRank double _rate
		if _rate>=100.0 :return"MAX"
		if _rate>95.0 :return"EX+"
		if _rate>90.0 :return"EX"
		if _rate>86.6 :return"SSS"
		if _rate>83.3 :return"SS"
		if _rate>80.0 :return"S"
		if _rate>75.0 :return"AAA+"
		if _rate>70.0 :return"AAA"
		if _rate>65.0 :return"AA+"
		if _rate>60.0 :return"AA"
		if _rate>55.0 :return"A+"
		if _rate>50.0 :return"A"
		if _rate>45.0 :return"B+"
		if _rate>40.0 :return"B"
		if _rate>35.0 :return"C+"
		if _rate>30.0 :return"C"
		if _rate>25.0 :return"D+"
		if _rate>20.0 :return"D"
		if _rate>15.0 :return"E+"
		if _rate>10.0 :return"E"
		if _rate>5.0 :return"F+"
		if _rate>0.0 :return"F"
		if _rate<=0.0 :return"---"
		return"-"

	#deffunc LoadBASSsample str _filename,var _chvar,var _smpvar,int _flag
		exist _filename
		sdim hbassbin,strsize
		bload _filename,hbassbin
		_smpvar=cfunc64(RET_INT64,BASS_SampleLoad,TRUE,varptr64(hbassbin),0,varsize(hbassbin),32,0)
		_chvar=cfunc64(RET_INT64,BASS_SampleGetChannel,_smpvar,_flag)
		sdim hbassbin
		return

	#defcfunc insquare int _x,int _y,int _sqx1,int _sqy1,int _sqx2,int _sqy2
		return (_x>_sqx1)&(_x<_sqx2)&(_y>_sqy1)&(_y<_sqy2)

	#deffunc PlaySE int _hwnd,double _vol
		cfunc64v BASS_ChannelSetAttribute,_hwnd,BASS_ATTRIB_VOL,d2f(_vol)
		cfunc64v BASS_ChannelSetPosition,_hwnd,0,0,0
		cfunc64v BASS_ChannelPlay,_hwnd
		return

	#deffunc InitIntArray
		sdim i_keylist:dim i_vallist
	return
	#deffunc InitStrArray
		sdim s_keylist:dim s_vallist
	return
	#deffunc RegIntArray str _key,int _value
		if vartype(i_keylist)==4 :InitIntArray
		dim mode:mode=0
		repeat length(i_keylist)
			if _key==i_keylist(cnt) {
				vallist(cnt)=_value
				mode=1
			}
		loop
		if mode==0 {
			i_keylist(length(i_keylist))=_key
			vallist(length(vallist))=_value
		}
	return
	#defcfunc GetIntArray str _key
		dim res
		repeat length(i_keylist)
			if _key==i_keylist(cnt) :res=vallist(cnt)
		loop
	return res
	#deffunc RegStrArray str _key,str _value
		if vartype(s_keylist)==4 :InitStrArray
		dim mode:mode=0
		repeat length(s_keylist)
			if _key==s_keylist(cnt) {
				vallist(cnt)=_value
				mode=1
			}
		loop
		if mode==0 {
			s_keylist(length(s_keylist))=_key
			vallist(length(vallist))=_value
		}
	return
	#defcfunc GetStrArray str _key
		dim res
		repeat length(s_keylist)
			if _key==s_keylist(cnt) :res=vallist(cnt)
		loop
	return res
#global